#!/usr/bin/env python
# -*- coding: utf-8 -*-

# filename   : vitree.py
# created at : 2013-01-17 17:34:36
# author     : Jianing Yang <jianingy.yang AT gmail DOT com>

__author__ = 'Jianing Yang <jianingy.yang AT gmail DOT com>'

SERVICE_BASE = 'http://localhost:9999/object'

from jsonrpc import ServiceProxy, JSONRPCException
from yaml import scanner
from subprocess import check_call
from yaml import load as yaml_load, dump as yaml_dump
from tempfile import mkstemp

import atexit
import os


def get_object_service(path):
    from os.path import join
    service_uri = join(SERVICE_BASE, path.strip('.').replace('.', '/'))
    return ServiceProxy(service_uri)

def is_internal_field(x):
    return x.startswith('__') and x.endswith('__')

def do_edit(editor, fd, filename, path, origin):

    try:
        check_call([editor, filename])
        os.lseek(fd, 0, 0)
        sb = os.fstat(fd)
        yaml = os.read(fd, sb.st_size)
        modified = yaml_load(yaml)
        if not modified:
            modified = {}
        value = filter(lambda x: not is_internal_field(x[0]), modified.iteritems())

        if '__model__' in modified:
            model = modified['__model__']
        elif '__model__' in origin:
            model = origin['__model__']
        else:
            print "ERROR: model not specified"
            return False

        value = dict(model=model, value=dict(value))
        get_object_service(path).update(value)

        return True
    except scanner.ScannerError as e:
        print "ERROR: Syntax error occured on your previous edit."
        print str(e)
        return False

    except JSONRPCException as e:
        print "ERROR: Your input cannot be accepted due to, "
        print '#', e.error['faultCode'], e.error['faultString']
        return False




def edit(path):

    editor = os.environ.get('EDITOR', 'vim')

    # make temporary file
    fd, filename = mkstemp()

    # delete temporary file after exit
    def __rmstemp():
        os.close(fd)
        os.unlink(filename)
    atexit.register(__rmstemp)

    # load tree data into temp file
    origin = get_object_service(path).get()
    filtered = filter(lambda x: not is_internal_field(x[0]), origin.iteritems())
    # use origin data as a start point for editing
    origin_yaml = yaml_dump(dict(filtered), default_flow_style=False)
    if origin:
        os.write(fd, origin_yaml)

    # edit
    while not do_edit(editor, fd, filename, path, origin):
        try:
            raw_input('press enter to edit again, press ctrl+c to abort')
        except KeyboardInterrupt:
            print "\n","Aborted!"
            break


if __name__ == '__main__':
    import sys
    edit(sys.argv[1])
